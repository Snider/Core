{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>Core is an opinionated framework for building Go desktop apps with Wails, providing a small set of focused modules you can mix into your app. It ships with sensible defaults and a demo app that doubles as in\u2011app help.</p> <ul> <li>Site: https://dappco.re</li> <li>Repo: https://github.com/Snider/Core</li> </ul>"},{"location":"index.html#modules","title":"Modules","text":"<ul> <li>Core \u2014 framework bootstrap and service container</li> <li>Core.Config \u2014 app and UI state persistence</li> <li>Core.Crypt \u2014 keys, encrypt/decrypt, sign/verify</li> <li>Core.Display \u2014 windows, tray, window state</li> <li>Core.Docs \u2014 in\u2011app help and deep\u2011links</li> <li>Core.IO \u2014 local/remote filesystem helpers</li> <li>Core.Workspace \u2014 projects and paths</li> </ul>"},{"location":"index.html#quick-start","title":"Quick start","text":"<pre><code>package main\n\nimport (\n    core \"github.com/Snider/Core\"\n)\n\nfunc main() {\n    app := core.New(\n        core.WithServiceLock(),\n    )\n    _ = app // start via Wails in your main package\n}\n</code></pre>"},{"location":"index.html#services","title":"Services","text":"<pre><code>package demo\n\nimport (\n    core \"github.com/Snider/Core\"\n)\n\n// Register your service\nfunc Register(c *core.Core) error {\n    return c.RegisterModule(\"demo\", &amp;Demo{core: c})\n}\n</code></pre>"},{"location":"index.html#display-example","title":"Display example","text":"<pre><code>package display\n\nimport (\n    \"context\"\n    \"github.com/wailsapp/wails/v3/pkg/application\"\n)\n\n// Open a window on startup\nfunc (d *API) ServiceStartup(ctx context.Context, _ application.ServiceOptions) error {\n    d.OpenWindow(\n        OptName(\"main\"),\n        OptHeight(900),\n        OptWidth(1280),\n        OptURL(\"/\"),\n        OptTitle(\"Core\"),\n    )\n    return nil\n}\n</code></pre> <p>See the left nav for detailed pages on each module.</p>"},{"location":"core/index.html","title":"Core","text":"<p>Short: Framework bootstrap and service container.</p>"},{"location":"core/index.html#what-it-is","title":"What it is","text":"<p>Core wires modules together, provides lifecycle hooks, and locks the service graph for clarity and safety.</p>"},{"location":"core/index.html#setup","title":"Setup","text":"<pre><code>import \"github.com/Snider/Core\"\n\napp := core.New(\n    core.WithServiceLock(),\n)\n</code></pre>"},{"location":"core/index.html#use","title":"Use","text":"<ul> <li>Register a module: <code>core.RegisterModule(name, module)</code></li> <li>Access a module: <code>core.Mod[T](c, name)</code></li> <li>Lock services: <code>core.WithServiceLock()</code></li> </ul>"},{"location":"core/index.html#api","title":"API","text":"<ul> <li><code>New(opts ...) *core.Core</code></li> <li><code>RegisterModule(name string, m any) error</code></li> <li><code>Mod[T any](c *core.Core, name ...string) *T</code></li> </ul>"},{"location":"core/config.html","title":"Core.Config","text":"<p>Short: App config and UI state persistence.</p>"},{"location":"core/config.html#overview","title":"Overview","text":"<p>Stores and retrieves configuration, including window positions/sizes and user prefs.</p>"},{"location":"core/config.html#setup","title":"Setup","text":"<pre><code>package main\n\nimport (\n  core \"github.com/Snider/Core\"\n  config \"github.com/Snider/Core/config\"\n)\n\napp := core.New(\n  core.WithService(config.Register),\n  core.WithServiceLock(),\n)\n</code></pre>"},{"location":"core/config.html#use","title":"Use","text":"<ul> <li>Persist UI state automatically when using <code>Core.Display</code>.</li> <li>Read/write your own settings via the config API.</li> </ul>"},{"location":"core/config.html#api","title":"API","text":"<ul> <li><code>Register(c *core.Core) error</code></li> <li><code>Get(path string, out any) error</code></li> <li><code>Set(path string, v any) error</code></li> </ul>"},{"location":"core/crypt.html","title":"Core.Crypt","text":"<p>Short: Keys, encrypt/decrypt, sign/verify.</p>"},{"location":"core/crypt.html#overview","title":"Overview","text":"<p>Simple wrappers around OpenPGP for common crypto tasks.</p>"},{"location":"core/crypt.html#setup","title":"Setup","text":"<pre><code>import (\n  core \"github.com/Snider/Core\"\n  crypt \"github.com/Snider/Core/crypt\"\n)\n\napp := core.New(\n  core.WithService(crypt.Register),\n  core.WithServiceLock(),\n)\n</code></pre>"},{"location":"core/crypt.html#use","title":"Use","text":"<ul> <li>Generate keys</li> <li>Encrypt/decrypt data</li> <li>Sign/verify messages</li> </ul>"},{"location":"core/crypt.html#api","title":"API","text":"<ul> <li><code>Register(c *core.Core) error</code></li> <li><code>GenerateKey(opts ...Option) (*Key, error)</code></li> <li><code>Encrypt(pub *Key, data []byte) ([]byte, error)</code></li> <li><code>Decrypt(priv *Key, data []byte) ([]byte, error)</code></li> <li><code>Sign(priv *Key, data []byte) ([]byte, error)</code></li> <li><code>Verify(pub *Key, data, sig []byte) error</code></li> </ul>"},{"location":"core/crypt.html#notes","title":"Notes","text":"<ul> <li>Uses ProtonMail OpenPGP fork.</li> </ul>"},{"location":"core/display.html","title":"Core.Display","text":"<p>Short: Windows, tray, and window state.</p>"},{"location":"core/display.html#overview","title":"Overview","text":"<p>Manages Wails windows, remembers positions/sizes, exposes JS bindings, and integrates with <code>Core.Config</code> for persistence.</p>"},{"location":"core/display.html#setup","title":"Setup","text":"<pre><code>import (\n  core \"github.com/Snider/Core\"\n  display \"github.com/Snider/Core/display\"\n)\n\napp := core.New(\n  core.WithService(display.Register),\n  core.WithServiceLock(),\n)\n</code></pre>"},{"location":"core/display.html#use","title":"Use","text":"<ul> <li>Open a window: <code>OpenWindow(OptName(\"main\"), ...)</code></li> <li>Get a window: <code>Window(\"main\")</code></li> <li>Save/restore state automatically when <code>Core.Config</code> is present</li> </ul>"},{"location":"core/display.html#api","title":"API","text":"<ul> <li><code>Register(c *core.Core) error</code></li> <li><code>OpenWindow(opts ...Option) *Window</code></li> <li><code>Window(name string) *Window</code></li> <li>Options: <code>OptName</code>, <code>OptWidth</code>, <code>OptHeight</code>, <code>OptURL</code>, <code>OptTitle</code></li> </ul>"},{"location":"core/display.html#example","title":"Example","text":"<pre><code>func (d *API) ServiceStartup(ctx context.Context, _ application.ServiceOptions) error {\n  d.OpenWindow(\n    OptName(\"main\"), OptWidth(1280), OptHeight(900), OptURL(\"/\"), OptTitle(\"Core\"),\n  )\n  return nil\n}\n</code></pre>"},{"location":"core/docs.html","title":"Core.Docs","text":"<p>Short: In\u2011app help and deep\u2011links.</p>"},{"location":"core/docs.html#overview","title":"Overview","text":"<p>Renders MkDocs content inside your app. Opens specific sections in new windows for contextual help.</p>"},{"location":"core/docs.html#setup","title":"Setup","text":"<pre><code>import (\n  core \"github.com/Snider/Core\"\n  docs \"github.com/Snider/Core/docs\"\n)\n\napp := core.New(\n  core.WithService(docs.Register),\n  core.WithServiceLock(),\n)\n</code></pre>"},{"location":"core/docs.html#use","title":"Use","text":"<ul> <li>Open docs home in a window: <code>docs.Open()</code></li> <li>Open a section: <code>docs.OpenAt(\"core/display#setup\")</code></li> <li>Use short, descriptive headings to create stable anchors.</li> </ul>"},{"location":"core/docs.html#api","title":"API","text":"<ul> <li><code>Register(c *core.Core) error</code></li> <li><code>Open()</code> \u2014 show docs home</li> <li><code>OpenAt(anchor string)</code> \u2014 open specific section</li> </ul>"},{"location":"core/docs.html#notes","title":"Notes","text":"<ul> <li>Docs are built with MkDocs Material and included in the demo app assets.</li> <li>You are viewing Core.Docs right now, this Website is bundled into the app binary by default.</li> </ul>"},{"location":"core/io.html","title":"Core.IO","text":"<p>Short: Local/remote filesystem helpers.</p>"},{"location":"core/io.html#overview","title":"Overview","text":"<p>Abstracts filesystems (local, SFTP, WebDAV) behind a unified API for reading/writing and listing.</p>"},{"location":"core/io.html#setup","title":"Setup","text":"<pre><code>import (\n  core \"github.com/Snider/Core\"\n  ioapi \"github.com/Snider/Core/filesystem\"\n)\n\napp := core.New(\n  core.WithService(ioapi.Register),\n  core.WithServiceLock(),\n)\n</code></pre>"},{"location":"core/io.html#use","title":"Use","text":"<ul> <li>Open a filesystem: <code>fs := ioapi.Local()</code> or <code>ioapi.SFTP(cfg)</code></li> <li>Read/write files: <code>fs.Read(path)</code>, <code>fs.Write(path, data)</code></li> <li>List directories: <code>fs.List(path)</code></li> </ul>"},{"location":"core/io.html#api","title":"API","text":"<ul> <li><code>Register(c *core.Core) error</code></li> <li><code>Local() FS</code></li> <li><code>SFTP(cfg Config) (FS, error)</code></li> <li><code>WebDAV(cfg Config) (FS, error)</code></li> </ul>"},{"location":"core/io.html#notes","title":"Notes","text":"<ul> <li>See package <code>pkg/v1/core/filesystem/*</code> for drivers.</li> </ul>"},{"location":"core/workspace.html","title":"Core.Workspace","text":"<p>Short: Projects and paths.</p>"},{"location":"core/workspace.html#overview","title":"Overview","text":"<p>Provides a consistent way to resolve app/project directories, temp/cache locations, and user data paths across platforms.</p>"},{"location":"core/workspace.html#setup","title":"Setup","text":"<pre><code>import (\n  core \"github.com/Snider/Core\"\n  workspace \"github.com/Snider/Core/workspace\"\n)\n\napp := core.New(\n  core.WithService(workspace.Register),\n  core.WithServiceLock(),\n)\n</code></pre>"},{"location":"core/workspace.html#use","title":"Use","text":"<ul> <li>Get app data dir: <code>ws.DataDir()</code></li> <li>Get cache dir: <code>ws.CacheDir()</code></li> <li>Resolve project path: <code>ws.Project(\"my-app\")</code></li> </ul>"},{"location":"core/workspace.html#api","title":"API","text":"<ul> <li><code>Register(c *core.Core) error</code></li> <li><code>DataDir() string</code></li> <li><code>CacheDir() string</code></li> <li><code>Project(name string) string</code></li> </ul>"},{"location":"core/workspace.html#notes","title":"Notes","text":"<ul> <li>Follows OS directory standards (AppData, ~/Library, XDG, etc.).</li> </ul>"}]}